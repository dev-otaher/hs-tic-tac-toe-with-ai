type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;

    public class Board {
        private final char[][] state;
        private boolean empty;

        public Board(String stateString) {
            this.state = parseState(stateString);
            setEmpty();
        }

        private void setEmpty() {
            this.empty = Arrays.deepToString(state).equals("_________");
        }

        public char[][] getState() {
            return state;
        }

        public boolean isEmpty() {
            return empty;
        }

        private char[][] parseState(String stateString) {
            char[][] array = new char[3][3];
            int charIndex = 0;
            for (int i = 0; i < array.length; i++) {
                for (int j = 0; j < array[i].length; j++) {
                    array[i][j] = stateString.charAt(charIndex);
                    charIndex++;
                }
            }
            return array;
        }

        public void updateState(Player player, int x, int y) {
            this.empty = false;
            this.state[x - 1][y - 1] = player.getLetter();
        }
    }
  learner_created: true
- name: src/tictactoe/MediumComputer.java
  visible: true
  text: |
    package tictactoe;

    public class MediumComputer extends EasyComputer {
        public MediumComputer(char letter, Board board) {
            super(letter, board);
        }

        @Override
        public int[] getMove() {
            if (!board.isEmpty()) {
                for (int i = 0; i < board.getState().length; i++) {
                    int letterCount = Helper.countChar(String.valueOf(board.getState()[i]), letter);
                    int emptyCount = Helper.countChar(String.valueOf(board.getState()[i]), '_');
                    if (letterCount == 2 && emptyCount == 1) {
                        int emptyIndex = String.valueOf(board.getState()[i]).indexOf('_');
                        return new int[]{i + 1, emptyIndex + 1};
                    }
                }

                String column = "";
                for (int i = 0; i < board.getState().length; i++) {
                    for (int j = 0; j < board.getState()[i].length; j++) {
                        column += board.getState()[j][i];
                        int letterCount = Helper.countChar(column, letter);
                        int emptyCount = Helper.countChar(column, '_');
                        if (letterCount == 2 && emptyCount == 1) {
                            int emptyIndex = column.indexOf('_');
                            return new int[]{emptyIndex + 1, i + 1};
                        }
                    }
                }

                column = "";
                for (int i = 0; i < board.getState().length; i++) {
                    for (int j = 0; j < board.getState()[i].length; j++) {
                        if (i == j) {
                            column += board.getState()[j][i];
                        }
                        int letterCount = Helper.countChar(column, letter);
                        int emptyCount = Helper.countChar(column, '_');
                        if (letterCount == 2 && emptyCount == 1) {
                            int emptyIndex = column.indexOf('_');
                            return new int[]{emptyIndex + 1, i + 1};
                        }
                    }
                }

                column = "";
                for (int i = 0; i < board.getState().length; i++) {
                    for (int j = 0; j < board.getState()[i].length; j++) {
                        if (i + j == board.getState().length - 1) {
                            column += board.getState()[j][i];
                        }
                        int letterCount = Helper.countChar(column, letter);
                        int emptyCount = Helper.countChar(column, '_');
                        if (letterCount == 2 && emptyCount == 1) {
                            int emptyIndex = column.indexOf('_');
                            return new int[]{emptyIndex + 1, i + 1};
                        }
                    }
                }



            }
            return super.getMove();
        }
    }
  learner_created: true
- name: src/tictactoe/EasyComputer.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class EasyComputer extends Player {
        Board board;

        public EasyComputer(char letter, Board board) {
            super(letter);
            this.board = board;
        }

        public int[] getMove() {
            int lower = 1, upper = 3;
            Random random = new Random();
            int x = random.nextInt(upper - lower + 1) + lower;
            int y = random.nextInt(upper - lower + 1) + lower;
            return new int[]{x, y};
        }
    }
  learner_created: true
- name: src/tictactoe/Helper.java
  visible: true
  text: |
    package tictactoe;

    public class Helper {
        public static boolean isArrayIdentical(char[] array) {
            for (char ch : array) {
                if (ch != array[0]) {
                    return false;
                }
            }
            return true;
        }

        public static int countChar(String str, char c) {
            int counter = 0;
            for (int i = 0; i < str.length(); i++) {
                if (str.charAt(i) == c) {
                    counter++;
                }
            }
            return counter;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Player {
        protected final char letter;

        public Player(char letter) {
            this.letter = letter;
        }

        public char getLetter() {
            return letter;
        }

        public int[] getMove() {
            System.out.print("Enter the coordinates: ");
            Scanner scanner = new Scanner(System.in);
            int x = Integer.parseInt(scanner.next());
            int y = Integer.parseInt(scanner.next());
            return new int[] {x, y};
        }
    }
  learner_created: true
- name: src/tictactoe/Judge.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;

    public class Judge {
        private final Board board;

        public Judge(Board board) {
            this.board = board;
        }

        public boolean isWinnerByRow(Player player) {
            for (char[] row : board.getState()) {
                if (row[0] == player.getLetter() && Helper.isArrayIdentical(row)) {
                    return true;
                }
            }
            return false;
        }

        public boolean isWinnerByColumn(Player player) {
            for (int c = 0; c < board.getState().length; c++) {
                char[] array = new char[board.getState().length];
                for (int r = 0; r < board.getState()[c].length; r++) {
                    array[r] = board.getState()[r][c];
                }
                if (array[0] == player.getLetter() && Helper.isArrayIdentical(array)) {
                    return true;
                }
            }
            return false;
        }

        public boolean isWinnerByDiagonal(Player player) {
            char[] array = new char[board.getState().length];
            for (int r = 0; r < board.getState().length; r++) {
                for (int c = 0; c < board.getState()[r].length; c++) {
                    if (r == c) {
                        array[r] = board.getState()[r][c];
                    }
                }
            }
            return array[0] == player.getLetter() && Helper.isArrayIdentical(array);
        }

        public boolean isWinnerByOtherDiagonal(Player player) {
            char[] array = new char[board.getState().length];
            for (int r = 0; r < board.getState().length; r++) {
                for (int c = 0; c < board.getState()[r].length; c++) {
                    if (r + c == board.getState().length - 1) {
                        array[r] = board.getState()[r][c];
                    }
                }
            }
            return array[0] == player.getLetter() && Helper.isArrayIdentical(array);
        }

        public boolean isWinner(Player player) {
            boolean isWinner = isWinnerByRow(player);
            if (!isWinner) {
                isWinner = isWinnerByColumn(player);
            }
            if (!isWinner) {
                isWinner = isWinnerByDiagonal(player);
            }
            if (!isWinner) {
                isWinner = isWinnerByOtherDiagonal(player);
            }
            return isWinner;
        }

        public boolean isCoordinatesInRange(int x, int y) {
            return x >= 1 && x <= 3 && y >= 1 && y <= 3;
        }


        public boolean isValidMove(int x, int y) {
            return board.getState()[x - 1][y - 1] == '_';
        }

        public boolean isValidInput(int x, int y) {
            return x != -1 || y != -1;
        }

        public int countPlayerMovements(char player) {
            return Helper.countChar(Arrays.deepToString(board.getState()), player);
        }

        public boolean isMovementsEqual() {
            return countPlayerMovements('X') == countPlayerMovements('O');
        }

        public char getCurrentPlayer() {
            if (isMovementsEqual()) {
                return 'X';
            } else {
                return 'O';
            }
        }

        public String assessBoard(Player p1, Player p2, Player currentPlayer) {
            int emptyCells = countPlayerMovements('_');
            if (!isWinner(p1) && !isWinner(p2) && emptyCells == 0) {
                System.out.println("Draw");
                return "D";
            } else if (isWinner(currentPlayer)) {
                System.out.println(currentPlayer.getLetter() + " wins");
                return "W";
            }
            return "";
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7437#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 05 Jul 2022 04:11:37 UTC
record: -1
